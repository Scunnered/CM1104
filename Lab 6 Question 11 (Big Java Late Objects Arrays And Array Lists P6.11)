/*
Author Ross M 1105864
Question 11 Big Java textbook Exercise - P6.11

Write a method
public static boolean sameElements(int[] a, int[] b)
that checks whether two arrays have the same elements in some order, with the same
multiplicities. For example,
1 4 9 16 9 7 4 9 11
and
11 1 4 9 16 9 7 4 9
would be considered identical, but
1 4 9 16 9 7 4 9 11
and
11 11 7 9 16 4 1 4 9
would not. You will probably need one or more helper methods.*/

import java.util.Scanner;

public class P6_11 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int[] firstArray = new int[5];
            for (int i = 0; i < firstArray.length; i++) {
        System.out.printf("%d) Enter the first elements for array one: ", i + 1);
        firstArray[i] = input.nextInt();}

        int[] secondArray = new int[5];
            for (int i = 0; i < secondArray.length; i++) {
        System.out.printf("%d) Enter the second elements for array two: ", i + 1);
        secondArray[i] = input.nextInt();}

        input.close();

        boolean isSameElements = sameElem(firstArray, secondArray);
        System.out.printf("Does the arrays share the same data set? %s"+" ", isSameElements);}

    public static boolean sameElem(int[] a, int[] b) {
            for (int i = 0; i < a.length; i++) {
        int currentElement = a[i];
        int firArraySets = 0;
            for (int j = 0; j < a.length; j++) {
            if (a[j] == currentElement) {
                firArraySets++;}
            }

        int secArraySets = 0;
            for (int j = 0; j < b.length; j++) {
            if (b[j] == currentElement) {
                secArraySets++;}
            }

            if (firArraySets != secArraySets) {
                return false;}
                }
                return true;}
}
